# -*- coding:  utf-8 -*-# https://vk.com/topic-152266438_36944907# http://forum.ascon.ru/index.php/topic,31120.0.htmltitle = u'Менеджер позиций v0.5.1'import pythoncom, re, sys, traceback, time, win32apifrom win32com.client import Dispatch, gencacheimport DispatchOCX_for_PosLeader as dispatchOCXtry:    import Tkinter as tk    import tkMessageBoxexcept:    import tkinter as tk    import tkinter.messagebox as tkMessageBoxtry:    ############################################################################    def Run_KOMPAS():        KAPI = gencache.EnsureModule('{0422828C-F174-495E-AC5D-D31014DBBE87}', 0, 1, 0)        iKompasObject = KAPI.KompasObject(Dispatch('Kompas.Application.5')._oleobj_.QueryInterface(KAPI.KompasObject.CLSID, pythoncom.IID_IDispatch))        KAPI7 = gencache.EnsureModule('{69AC2981-37C0-4379-84FD-5DD2F3C0A520}', 0, 1, 0)        iApplication = KAPI7.IApplication(Dispatch('Kompas.Application.7')._oleobj_.QueryInterface(KAPI7.IApplication.CLSID, pythoncom.IID_IDispatch))        return KAPI, iKompasObject, KAPI7, iApplication    ############################################################################    def INFO (message_ = '', f_ = 0, memory = 1):        global message, f        if memory:            message, f = message_, f_        info [ 'text' ] = message_        if f_:            info [ 'fg' ]  = '#aa0000'        else:            info [ 'fg' ]  = '#000000'        root.update()  ################################################### Изменение номеров позиций #################################################################    def Start():        global y, z, iViews        y, z =  0, 0        def Fun(iDrawingObject):            global x            x = 0            def Sort(m):                global z, y, x                y = 1                if int(m.group(1)) >= n_0 and int(m.group(1))<= n_1:                    z +=1                    x = 1                    return str(int(m.group(1)) + n)                else:                    return  m.group(1)            N = KAPI7.IPositionLeader(iDrawingObject).Positions.Str            N_new = re.sub(r'(-?\d+)', lambda m: Sort(m), N)            if x:                KAPI7.IPositionLeader(iDrawingObject).Positions.Str = N_new                iDrawingObject.Update()                x = 0        def For_View(iView):            global iDrawingContainer            iDrawingContainer = KAPI7.IDrawingContainer(iView) # контейнер графических объектов            Objects = iDrawingContainer.Objects( 21 ) # получить массив объектов коллекции            if Objects:                for OBJ in Objects:                    if iView.Type ==  13081:                        if  iViews.ViewByNumber(float(ksDocument2D.ksGetViewNumber(KAPI7.IDrawingObject(OBJ).Reference))).Layers.LayerByNumber(float(ksDocument2D.ksGetLayerNumber(KAPI7.IDrawingObject(OBJ).Reference))).Visible:                            Fun(KAPI7.IDrawingObject(OBJ))                    else:                        if iView.Layers.LayerByNumber(float(ksDocument2D.ksGetLayerNumber(KAPI7.IDrawingObject(OBJ).Reference))).Visible:                            Fun(KAPI7.IDrawingObject(OBJ))        def recurce_macro(iMacroObject):            '''            Перебирает рекурсивно вложенные макроэлементы            '''            For_View(iMacroObject) # собираем инфу об объектах пришедшего макроэлемента            iMacroObjects = iDrawingContainer.MacroObjects # получаем коллекцию макроэлементов            if iMacroObjects.Count == 0: # если макроэлементов нет, выходим                return            else: # если макроэлементы есть                for m in range(iMacroObjects.Count): # перебираем все макроэлементы                    iMacroObject = iMacroObjects.MacroObject( m ) #получаем интерфейс m-го макроэлемента                    recurce_macro(iMacroObject) # этой же функцией собираем инфу в макроэлементе и проверяем наличие вложенных макроэлементов        #### Начало #####        try:       	    pythoncom.connect('Kompas.Application.5')                           # Проверка запущен ли КОМПАС            KAPI, iKompasObject, KAPI7, iApplication = Run_KOMPAS()        except:            INFO (u'КОМПАС-3D не запущен', 1)            return        n = int(arg.get().rstrip())        if  Lab1['text'] ==  u'уменьшить':            n = -n        if nachalnaya_poz.get().rstrip() != '':            n_0 = int(nachalnaya_poz.get().rstrip())        else:            n_0 = -1E10        if konechnaya_poz.get().rstrip() != '':            n_1 = int(konechnaya_poz.get().rstrip())        else:            n_1 = 1E10        iDocument = iApplication.ActiveDocument        ksDocument2D = iKompasObject.ActiveDocument2D()        if iDocument:            if iDocument.DocumentType in [1, 2]:                iDocument2D = KAPI7.IKompasDocument2D(iDocument)                iDocument2D1 = KAPI7.IKompasDocument2D1(iDocument2D)                iViewsAndLayersManager = iDocument2D.ViewsAndLayersManager                iViews = iViewsAndLayersManager.Views                if Lab2['text'] == u'в выделении':                    iSelectionManager = iDocument2D1.SelectionManager                    SelectedObjects  = iSelectionManager.SelectedObjects                    if SelectedObjects:                        if isinstance(SelectedObjects, tuple):                            for obj in SelectedObjects:                                iDrawingObject = KAPI7.IDrawingObject(obj)                                if iDrawingObject.Type == 13058:                                    Fun(iDrawingObject)                                elif iDrawingObject.Type in [10031, 10032, 13081]:# вид, ассоциативный вид, макроэлемент                                    recurce_macro(iDrawingObject)                        else:                            iDrawingObject = KAPI7.IDrawingObject(SelectedObjects)                            if iDrawingObject.Type == 13058:                                Fun(iDrawingObject)                            elif iDrawingObject.Type in [10031, 10032, 13081]:# вид, ассоциативный вид, макроэлемент:                                recurce_macro(iDrawingObject)                        if z:                            INFO(u'Количество изменённых номеров позиций: ' + str(z))                        elif y:                            INFO(u'В выделении нет номеров позиций, удовлетворяющих условию!', 1)                        else:                            INFO(u'В выделении нет обозначений позиций!', 1)                    else:                        INFO(u'Ничего не выделено!', 1)                else:                    for i in range(iViews.Count):                        iView = iViews.View ( i )                        if not iView.Visible: # если вид невидимый, пропускаем его                            continue                        recurce_macro(iView)                    if z:                        INFO(u'Количество изменённых номеров позиций: ' + str(z))                    elif y:                        INFO(u'В документе нет номеров позиций, удовлетворяющих условию!', 1)                    else:                        INFO(u'В документе нет обозначений позиций!', 1)            else:                INFO(u'Активный документ должен быть чертежом или фрагментом!', 1)        else:            INFO(u'Нет активного документа', 1)    def changeobozn(updown, widget):											# Увеличивает или уменьшает на единицу        digits_str = widget.get().rstrip()        if digits_str != '':            digits = int(digits_str)            if updown == '+':                digits += 1            else:                if digits > 1:													# изменять на 0 нет смысла, поставил минимум 1                    digits -= 1            widget.set(str(digits))    def Uvel_umen():        if Lab1['fg'] == '#009000':            Lab1['fg'] = '#C00000'            Lab1['text'] =  u'уменьшить'        else:            Lab1['fg'] = '#009000'            Lab1['text'] = u'увеличить'    def Proverka(event):        widget = event.widget        value = widget.get().rstrip()        if value != '':            try:                int(value)            except:                widget.delete(0, tk.END)                if re.findall(r'\D?\d+.?', value):                    widget.insert(0, re.findall(r'\D?(\d+).?', value)[0])                else:                    widget.insert(0, '')    def All_Select():        if Lab2['text'] == u'в документе':										# во всём документе.            Lab2['text'] = u'в выделении'										# только            Lab2['fg'] = '#00B000'            #Lab2['relief'] = 'groove'        else:            Lab2['text'] = u'в документе'            Lab2['fg'] = '#0000A0'            Lab2['relief'] = 'flat'############################ Ассоциативная позиция ###################################################    def Past_pos(premier=0):        def PosLeader(x0, y0, x, y):            iPosLeaderParam = KAPI.ksPosLeaderParam(iKompasObject.GetParamStruct(61)) # ko_PosLeaderParam            iPosLeaderParam.Init()            iPosLeaderParam.arrowType = 1            if x < x0:                iPosLeaderParam.dirX = -1            else:                iPosLeaderParam.dirX = 1            iPosLeaderParam.style = 65535            iPosLeaderParam.x = x            iPosLeaderParam.y = y            iPolylineArray = KAPI.ksDynamicArray(iPosLeaderParam.GetpPolyline())            iMathPointArray = KAPI.ksDynamicArray(iKompasObject.GetDynamicArray(2))            iMathPointParam = KAPI.ksMathPointParam(iKompasObject.GetParamStruct(14)) # ko_MathPointParam            iMathPointParam.Init()            iMathPointParam.x = x0            iMathPointParam.y = y0            iMathPointArray.ksAddArrayItem(-1, iMathPointParam)            iPolylineArray.ksAddArrayItem(-1, iMathPointArray)            iPosLeaderParam.SetpPolyline(iPolylineArray)            return ksDocument2D.ksPositionLeader(iPosLeaderParam)        def Selection():            global SelectedObjects_0, obj_sp            root.update()            if flag_stop:                INFO(u'Выполнение прервано пользователем')                Stop()                iSelectionManager.UnselectAll()                ksDocument2D.ksLightObj (iDrawingGroup.Reference, 0)                return            SelectedObjects  = iSelectionManager.SelectedObjects            if  SelectedObjects and SelectedObjects_0 != SelectedObjects and not isinstance(SelectedObjects, tuple):                if iKompasObject.ksIsKompasCommandCheck(10162):                    iApplication.StopCurrentProcess(0, iDocument)                obj_sp = ksSpecification.ksGetSpcObjForGeom (LayoutName, StyleID, KAPI7.IDrawingObject(SelectedObjects).Reference, 0, 1)                if  obj_sp:                    iSpecificationBaseObjects = iSpecificationDescription.BaseObjects                    iSpecificationBaseObject = iSpecificationBaseObjects.Item(obj_sp)                    Geometry = iSpecificationBaseObject.Geometry                    ksDocument2D.ksLightObj (iDrawingGroup.Reference, 0)                    iDrawingGroup.Open()                    iDrawingGroup.Clear(True)                    iDrawingGroup.AddObjects(Geometry)                    iDrawingGroup.Close()                    ksDocument2D.ksLightObj (iDrawingGroup.Reference, 1)                    iView = iViews.ViewByNumber(ksDocument2D.ksGetViewNumber(KAPI7.IDrawingObject(SelectedObjects).Reference))                    iView.Current = True                    iView.Update()                    INFO (u'Подтвердите выбор нажатием Enter или выберите другую деталь')                    SelectedObjects_0 = SelectedObjects                else:                    INFO(u'Указанный примитив не связан с объектом спецификации!', 1)                    iSelectionManager.UnselectAll()                    ksDocument2D.ksLightObj (iDrawingGroup.Reference, 0)                    iKompasObject.ksExecuteKompasCommand(10162, 1)                    SelectedObjects_0 = None                    Selection()            if isinstance(SelectedObjects, tuple):                iSelectionManager.UnselectAll()            if obj_sp and win32api.GetAsyncKeyState(0x0D) != 0:                INFO (u'Укажите точку, на которую указывает линия выноска')                iViewsAndLayersManager = iDocument2D.ViewsAndLayersManager                if SelectedObjects:                    if not isinstance(SelectedObjects, tuple):                        iView = iViews.ViewByNumber(ksDocument2D.ksGetViewNumber(KAPI7.IDrawingObject(SelectedObjects).Reference))                        iView.Current = True                        iView.Update()                requestInfo = iKompasObject.GetParamStruct(10)                requestInfo.Init()                requestInfo.prompt = u'Укажите точку, на которую указывает линия-выноска'                koord = ksDocument2D.ksCursor (requestInfo, 0.0, 0.0, None)                if koord[0]:                    requestInfo.prompt = u'Укажите точку начала полки'                    requestInfo.dynamic = 1                    phantom = iKompasObject.GetParamStruct(6)                    phantom.Init()                    phantom.phantom = 1                    type1 = phantom.GetPhantomParam()                    type1.Init()                    type1.xBase = 0.0                    type1.yBase = 0.0                    type1.scale_ = 1.0                    dispatchOCX.x0, dispatchOCX.y0 = koord[1], koord[2]                    type1.gr = ksDocument2D.ksNewGroup(1)                    dispatchOCX.PosLeader(ksDocument2D, iKompasObject, 0,0, 0,0)                    ksDocument2D.ksEndGroup()                    ocx = Dispatch("Python.DispatchOCX")                    ocx.Init(iKompasObject)                    requestInfo.SetCallBackC(u"CallBackC", 0, ocx)                    koord2 = ksDocument2D.ksGetCursorPosition(0, 0, 1)                    ksDocument2D.ksCursor (requestInfo, koord2[1], koord2[2], phantom)                    koord2 = ksDocument2D.ksGetCursorPosition(0, 0, 1)                    if koord2[0]:                        iSelectionManager.UnselectAll()                        ksDocument2D.ksLightObj (iDrawingGroup.Reference, 0)########################################                        obj_pos = PosLeader( koord[1], koord [2], koord2[1], koord2 [2])                        ksSpecification.ksSpcObjectEdit(obj_sp)                        ksSpecification.ksSpcIncludeReference(obj_pos, 0)                        ksSpecification.ksSpcObjectEnd()                        Past_pos()                INFO(u'Выполнение прервано пользователем')                Stop()                iSelectionManager.UnselectAll()                ksDocument2D.ksLightObj (iDrawingGroup.Reference, 0)            else:                time.sleep(0.25)                Selection()        #### Начало ####        global iViews, flag_stop, obj_sp, KAPI, iKompasObject, KAPI7, iApplication, iSelectionManager, iDocument, ksDocument2D, iDocument2D, SelectedObjects_0        obj_sp = 0        if premier:            flag_stop = 0        try:       	    pythoncom.connect('Kompas.Application.5')                           # Проверка запущен ли КОМПАС            KAPI, iKompasObject, KAPI7, iApplication = Run_KOMPAS()        except:            INFO (u'КОМПАС-3D не запущен!', 1)            return        iDocument = iApplication.ActiveDocument        if iDocument:            if iDocument.DocumentType in [1, 2]:                ksDocument2D = iKompasObject.ActiveDocument2D()                iDocument2D = KAPI7.IKompasDocument2D(iDocument)                iDocument2D1 = KAPI7.IKompasDocument2D1(iDocument2D)                iViewsAndLayersManager = iDocument2D.ViewsAndLayersManager                iViews = iViewsAndLayersManager.Views                iSpecificationDescriptions = iDocument.SpecificationDescriptions                iSpecificationDescription = iSpecificationDescriptions.Active                if iSpecificationDescription:                    LayoutName = iSpecificationDescription.LayoutName                    StyleID = iSpecificationDescription.StyleID                    ksSpecification = ksDocument2D.GetSpecification()                    iSelectionManager = iDocument2D1.SelectionManager                    iSelectionManager.UnselectAll()                    INFO (u'Укажите геометрический примитив, принадлежащий объекту спецификации')                    but_pos.grid_remove()                    but_stop_pos.grid(row=0, column = 0)                    iKompasObject.ksExecuteKompasCommand(10162, 1)                    SelectedObjects_0 = None                    iDrawingGroups = iDocument2D1.DrawingGroups                    iDrawingGroup = iDrawingGroups.Add (True, 'Ligth_group')                    Selection()                else:                    INFO(u'В активном документе нет описания спецификации!', 1)                    Stop()            else:                INFO(u'Нет активного чертежа или фрагмента!', 1)                Stop()        else:            INFO(u'Нет активного чертежа или фрагмента!', 1)            Stop()    def Stop():        iApplication.StopCurrentProcess(0, iDocument)        but_stop_pos.grid_remove()        but_pos.grid(row=0, column = 0)        root.update()    def Flag_Stop():        global flag_stop        flag_stop = 1###################################    Графическое окно     ############################################    root = tk.Tk()																# создаём окно    root.title(title)															# заголовок окна    screen_size_X = root.winfo_screenwidth()									# получаем ширину экрана    screen_size_Y = root.winfo_screenheight()									# получаем высоту экрана    root.geometry('622x175+%d+%d' %(screen_size_X/2-250, screen_size_Y/2-140))    root.resizable(width = False, height = False)    root.wm_attributes('-topmost', 1)    root.focus_force()    W, E, N, S, END = tk.W, tk.E, tk.N, tk.S, tk.END    frame = tk.Frame(root, bd = 4, relief='ridge', padx=4, pady=4)    frame.grid(row=0, column = 0)    ############ frame1 ##########################    frame1 = tk.Frame(frame)    frame1.grid(row=0, column = 0)    #    tk.Label(frame1, text = u'Позиции с ', font = ('gost type a',16)).grid(row=0, column=0, rowspan=2, sticky = W)	# Начиная с, Номера позиций    # Начальная позиция    in_nachalnaya_poz = tk.StringVar()    in_nachalnaya_poz.set('')    nachalnaya_poz = tk.Entry(frame1, borderwidth = 2, textvariable = in_nachalnaya_poz, font = ('gost type a',16), width=4)	# 18    nachalnaya_poz.grid(row=0, column=1, rowspan=2)    nachalnaya_poz.bind('<KeyRelease>', Proverka)    # Начальная позиция +    but1 = tk.Button(frame1, text = '▲', takefocus = False, width=4, bd=2, command = lambda: changeobozn('+', in_nachalnaya_poz), font = ('gost type a', 6, 'bold'), bg = '#009000')    but1.grid(row=0, column = 2)    but1.config(cursor='based_arrow_up')    # Начальная позиция -    but2 = tk.Button(frame1, text = '▼', takefocus = False, width=4, bd=2, command = lambda: changeobozn('-', in_nachalnaya_poz), font = ('gost type a', 6, 'bold'), bg = '#C00000')    but2.grid(row=1, column = 2)    but2.config(cursor='based_arrow_down')    #    tk.Label(frame1, text = u' по ', font = ('gost type a',16)).grid(row=0, column=3, rowspan=2)	# и заканчивая    # Конечная позиция    in_konechnaya_poz = tk.StringVar()    in_konechnaya_poz.set('')    konechnaya_poz = tk.Entry(frame1, borderwidth = 2, textvariable = in_konechnaya_poz, font = ('gost type a',16), width=4)	# 18    konechnaya_poz.grid(row=0, column=4, rowspan=2)    konechnaya_poz.bind('<KeyRelease>', Proverka)    # Конечная позиция +    but11 = tk.Button(frame1, text = '▲', takefocus = False, width=4, bd=2, command = lambda: changeobozn('+', in_konechnaya_poz), font = ('gost type a', 6, 'bold'), bg = '#009000')    but11.grid(row=0, column = 5)    but11.config(cursor='based_arrow_up')    # Конечная позиция -    but12 = tk.Button(frame1, text = '▼', takefocus = False, width=4, bd=2, command = lambda: changeobozn('-', in_konechnaya_poz), font = ('gost type a', 6, 'bold'), bg = '#C00000')    but12.grid(row=1, column = 5)    but12.config(cursor='based_arrow_down')    #tk.Label(frame1, text = u',', font = ('gost type a',16)).grid(row=0, column=6, rowspan=2)    ############ frame2 ##########################    frame2 = tk.Frame(frame)	# bd = 4    frame2.grid(row=0, column = 1)    # Увеличить\Уменьшить    Lab1 = tk.Label(frame2, text = u'увеличить', fg = '#009000', font = ('gost type a',16, 'bold'), width=10)    Lab1.grid(row=0, column=0, rowspan=2, sticky = W)    Lab1.bind('<Button-1>', lambda event: Uvel_umen())    Lab1.config(cursor='exchange')    #    tk.Label(frame2, text = u'на ', font = ('gost type a',16)).grid(row=0, column=1, rowspan=2, sticky = W)	# номера позиций    # Аргумент приращения    in_arg = tk.StringVar()    in_arg.set('1')    arg = tk.Entry(frame2, borderwidth = 2, textvariable = in_arg, font = ('gost type a',16), width=4)	# 20    arg.grid(row=0, column=2, rowspan=2, sticky = E+W)    arg.bind('<KeyRelease>', Proverka)    # Аргумент +    but21 = tk.Button(frame2, text = '▲', takefocus = False,  width=4, bd=2, command = lambda: changeobozn('+', in_arg), font = ('gost type a', 6, 'bold'), bg = '#009000')    but21.grid(row=0, column = 3, sticky = W)    but21.config(cursor='based_arrow_up')    # Аргумент -    but22 = tk.Button(frame2, text = '▼', takefocus = False, width=4, bd=2, command = lambda: changeobozn('-', in_arg), font = ('gost type a', 6, 'bold'), bg = '#C00000')    but22.grid(row=1, column = 3, sticky = W)    but22.config(cursor='based_arrow_down')    # Во всём\ в выделении    Lab2 = tk.Label(frame2, text = u'в документе', fg = '#0000A0', font = ('gost type a',16, 'bold'),padx=5, width=11)	# во всём документе.    Lab2.grid(row=0, column=4, rowspan=2, sticky = E+W)    Lab2.bind('<Button-1>', lambda event: All_Select())    Lab2.config(cursor='exchange')    ############ frame3 ##########################    frame3 = tk.Frame(frame)    frame3.grid(row=0, column = 3)    # Выполнить    but = tk.Button(frame3, text = ' Ok ', takefocus = False, bd=2, command = Start, font = ('gost type a', 16, 'bold'), bg = '#ffaa44')    but.grid(row=0, column = 0)    but.config(cursor='hand2')    but.bind ('<Enter>', lambda e: INFO('Изменение номеров обозначений позиций согласно текущим настройкам', memory = 0))    message, f = '', 0    but.bind ('<Leave>', lambda e: INFO(message, f))    ####    F    ###########    F = tk.Frame(root, pady=8)    F.grid(row=1, column = 0)    tk.Label(F).pack()    ####    FRAME №2    ###########    FRAME2 = tk.Frame(root, bd = 4, relief='ridge', padx=4, pady=4)    FRAME2.grid(row=2, column = 0, sticky = E+W)    # Поставить позицию    but_pos = tk.Button(FRAME2, text = 'Создать ассоциативное обозначение позиции',width = 66, takefocus = False, bd=2, command = lambda x=1: Past_pos(x), font = ('gost type a', 16, 'bold'), bg = '#7777ff')    but_pos.grid(row=0, column = 0, sticky = E+W)    but_pos.config(cursor='hand2')    but_pos.bind ('<Enter>', lambda e: INFO('Создание обозначения позиции, которое будет связано с объектом спецификации указываемой геометрии', memory = 0))    but_pos.bind ('<Leave>', lambda e: INFO(message, f))    # Отменить создание позиции    but_stop_pos = tk.Button(FRAME2, text = 'Отмена', width = 66, command = Flag_Stop, takefocus = False, bd=2, font = ('gost type a', 16, 'bold'), bg = '#7777ff')    but_stop_pos.grid_remove()    but_stop_pos.config(cursor='hand2')    but_stop_pos.bind ('<Enter>', lambda e: INFO('Отменить создание обозначения позиции', memory = 0))    but_stop_pos.bind ('<Leave>', lambda e: INFO(message, f))    ####    FRAME №3    ############    FRAME3 = tk.Frame(root, bd = 4)    FRAME3.grid(row=3, column = 0, sticky = W)    # строка состояния    info = tk.Label(FRAME3)    info.grid(row=0, column = 0)    ##############################    root.mainloop()except Exception as e:    root = tk.Tk()    root.withdraw()    tkMessageBox.showwarning(title, traceback.format_exc().decode('cp1251'))	# показываем окно с выводом ошибки    root.destroy()